kappa=1
ab.kappa=c(1,.001)
tau=1000
d <- length(y)
nu.a<-nu.b<-nu/2
if(length(nu)==2)
{
nu.a<-nu[1]
nu.b<-nu[2]
}
p<-max(dim(coords))
gamma <- vector(length = d)
eta <- vector(length = d)
if(adaptive){
weights <- vector(length = p)
}
gamma <- rep(x=0, time=d)
Q<-weightedQ(rep(1,p),coords)
if (method=="mh2"|method=="gibbs2"|method=="gibbs2beta") Q1<-solve(Q[-d,-d])
if (adaptive){#} & method!="approx"){
source('~/Dropbox/projects/approxGibbs/adm/R/weightedQ.R')
Q<-weightedQ(rep(1,p),coords)
method="gibbs2"
c
)))))
Q<-weightedQ(rep(1,p),coords)
source('~/Dropbox/projects/approxGibbs/adm/R/weightedQ.R')
Q<-weightedQ(rep(1,p),coords)
if (method=="mh2"|method=="gibbs2"|method=="gibbs2beta") Q1<-solve(Q[-d,-d])
method="gibbs2"
if (method=="mh2"|method=="gibbs2"|method=="gibbs2beta") Q1<-solve(Q[-d,-d])
if (adaptive){#} & method!="approx"){
nr.nei<-apply(coords,1,test.for.eins,coords)
nr.einer <- any(nr.nei==1)
nr.nei.eins <- which(nr.nei==1)
}
diagM <- array(0,c(p,d))
source('~/Dropbox/projects/approxGibbs/adm/R/test_for_eins.R')
if (method=="mh2"|method=="gibbs2"|method=="gibbs2beta") Q1<-solve(Q[-d,-d])
if (adaptive){#} & method!="approx"){
nr.nei<-apply(coords,1,test.for.eins,coords)
nr.einer <- any(nr.nei==1)
nr.nei.eins <- which(nr.nei==1)
}
diagM <- array(0,c(p,d))
for (i in 1:p)
{
diagM[i,as.vector(coords[i,])]<-1
}
if(adaptive)if (method=="gibbs.approx.simple")
{
if(require(parallel))next.n <- mclapply(1:p, find.nn, coords, nr.nei)
if(!require(parallel))next.n <- lapply(1:p, find.nn, coords, nr.nei)
}
if(adaptive)if (method=="gibbs.approx"|method=="gibbs")
{
if(require(parallel))Gg <- mclapply(1:p, estimate.g, coords)
if(!require(parallel))Gg <- lapply(1:p, estimate.g, coords)
}
if(adaptive){
weights <- rep(nu.a/nu.b,p)
if (method=="gibbs2beta")weights=rep(1,p)
Q<-weightedQ(weights,coords)
}
if (method=="gibbs")
{
#diags<-unlist(mclapply(1:d,function(i,weights,coords){sum(weights[coords[,1]==i])+sum(weights[coords[,2]==i])},weights,coords))
diags<-(weights%*%diagM)[1,]
}
for(u in 1:length(y)){
if(y[u] == 0){
eta[u] <- 0
}
else
{
eta[u] <- log(y[u]/e[u])
}
}
if (method=="gibbs3"|method=="gibbs3beta")
{
par.list=par.list2=list()
counter=0
for (i in sample(1:p))
{
if (!nr.nei[i])
{
if (counter==0)
{
par.list[[1]]=rep(FALSE,p)
par.list[[1]][coords[i,]]=TRUE
par.list2[[1]]=i
counter=1
}
else
{
test=FALSE
j=0
while((!test)&(j<counter))
{
j=j+1
test=!any(par.list[[j]][coords[i,]])
}
if(test)
{
par.list[[j]][coords[i,]]=TRUE
par.list2[[j]]=c(par.list2[[j]],i)
}
else
{
par.list[[j+1]]=rep(FALSE,p)
par.list[[j+1]][coords[i,]]=TRUE
par.list2[[j+1]]=i
counter=j+1
}
par=par.list
par2=par.list2
new.sample<-sample(counter)
for (k in 1:counter)
{
par.list[[new.sample[k]]]<-par[[k]]
par.list2[[new.sample[k]]]<-par2[[k]]
}
}
}
}
}
nr.samples<-floor((nr.it-burnin)/thin)
gamma.sample <- array(NA,c(nr.samples,d))
alpha.sample <- array(NA,c(nr.samples,d))
eta.sample <- array(NA,c(nr.samples,d))
kappa.sample <- rep(NA,nr.samples)
if(adaptive){
weights.sample <- array(NA,c(nr.samples,p))
}
P <- kappa*Q + diag(tau,d)
#print(class(P))
#diag(P) <- diag(P) + tau
b <- tau*eta
gamma <- as.vector(rmvnorm(n = 1, b = b, P = P))
source('~/Dropbox/projects/approxGibbs/adm/R/rmvnorm.R')
gamma <- as.vector(rmvnorm(n = 1, b = b, P = P))
# kappa
if(do.kappa){
aa <- ab.kappa[1] + (d-1)/2
bb <- ab.kappa[2] + as.vector(0.5*(t(gamma)%*%Q%*%gamma))
kappa <- rgamma(n = 1,  shape = aa, rate = bb)
}
do.kappa=FALSE
# kappa
if(do.kappa){
aa <- ab.kappa[1] + (d-1)/2
bb <- ab.kappa[2] + as.vector(0.5*(t(gamma)%*%Q%*%gamma))
kappa <- rgamma(n = 1,  shape = aa, rate = bb)
}
m.temp <- (gamma +log(e))*tau + y
eta<-sample.eta(eta, m.temp, tau,e)
source('~/Dropbox/projects/approxGibbs/adm/R/sample_eta.R')
source('~/Dropbox/projects/approxGibbs/adm/R/rtrunc.R')
eta<-sample.eta(eta, m.temp, tau,e)
if (nr.einer)# nr.nei=1 -> use simple Gibbs sampler
{
nee<-coords[nr.nei.eins,]
if(is.null(dim(nee)))
{
b.temp <- (kappa*(gamma[nee[1]]-gamma[nee[2]])^2/2 + nu.b)
}
else
{
b.temp <- (kappa*(gamma[nee[,1]]-gamma[nee[,2]])^2/2 + nu.b)
}
a.temp <- nu.a+1/2
weights[nr.nei.eins] <-rgamma(length(nr.nei.eins),a.temp,b.temp)
}
diags<-(weights%*%diagM)[1,]
Q <- sparseMatrix(i=c(1:d,coords[,1]),j=c(1:d,coords[,2]),x=c(diags,-weights),symmetric=TRUE)
Q1 <- solve(Q[-d,-d])
Q1 <- as.matrix(Q1)
i=1
nr.nei[1]
nr.nei[2]
nr.nei[2]==1
xy<-as.vector(coords[i,])
xy<-xy[xy!=d]
Q0<-Q1[xy,xy]
xy
zaehler = diff(Q0)
zaehler = weights[i]*t(zaehler)%*%zaehler
qtilde0=Q0[1,1]+Q0[2,2]-2*Q0[1,2]
Q0=Q0+zaehler/(1-weights[i]*qtilde0)
qtilde=Q0[1,1]+Q0[2,2]-2*Q0[1,2]
b.temp <- (kappa*(gamma[xy[1]]-gamma[xy[2]])^2/2 + nu.b)
a.temp <- 1.5
print(-1/qtilde)
weights.proposed <-rstgamma(n=1,shape=a.temp,rate=b.temp,shift=-1/qtilde,a=0,b=1)
source('~/Dropbox/projects/approxGibbs/adm/R/rstgamma.R')
source('~/Dropbox/projects/approxGibbs/adm/R/rstgamma.R')
weights.proposed <-rstgamma(n=1,shape=a.temp,rate=b.temp,shift=-1/qtilde,a=0,b=1)
source('~/Dropbox/projects/approxGibbs/adm/R/qtrunc.R')
weights.proposed <-rstgamma(n=1,shape=a.temp,rate=b.temp,shift=-1/qtilde,a=0,b=1)
source('~/Dropbox/projects/approxGibbs/adm/R/psgamma.R')
weights.proposed <-rstgamma(n=1,shape=a.temp,rate=b.temp,shift=-1/qtilde,a=0,b=1)
source('~/Dropbox/projects/approxGibbs/adm/R/qsgamma.R')
weights.proposed <-rstgamma(n=1,shape=a.temp,rate=b.temp,shift=-1/qtilde,a=0,b=1)
#update Q0
qtemp=diff(Q1[xy,])
qtemp1 = (weights.proposed-weights[i])
qtemp = qtemp1*t(qtemp)%*%qtemp
qtemp2 = 1-qtemp1*qtilde0
Q1 <- Q1 + qtemp/qtemp2
weights[i]=weights.proposed
system.time({
for (i in 1:p)
{
if(!(nr.nei[i]==1))
{
xy<-as.vector(coords[i,])
xy<-xy[xy!=d]
Q0<-Q1[xy,xy]
if (length(xy)==2)
{
zaehler = diff(Q0)
zaehler = weights[i]*t(zaehler)%*%zaehler
qtilde0=Q0[1,1]+Q0[2,2]-2*Q0[1,2]
Q0=Q0+zaehler/(1-weights[i]*qtilde0)
qtilde=Q0[1,1]+Q0[2,2]-2*Q0[1,2]
}
else
{
zaehler = weights[i]*t(Q0)%*%Q0
qtilde0=Q0
qtilde=Q0+zaehler/(1-weights[i]*Q0)
}
b.temp <- (kappa*(gamma[xy[1]]-gamma[xy[2]])^2/2 + nu.b)
a.temp <- 1.5
print(-1/qtilde)
weights.proposed <-rstgamma(n=1,shape=a.temp,rate=b.temp,shift=-1/qtilde,a=0,b=1)
#update Q0
qtemp=diff(Q1[xy,])
qtemp1 = (weights.proposed-weights[i])
qtemp = qtemp1*t(qtemp)%*%qtemp
qtemp2 = 1-qtemp1*qtilde0
Q1 <- Q1 + qtemp/qtemp2
weights[i]=weights.proposed
}
}#endfor
})
i
p
weights
for (i in 1:p)
{
if(!(nr.nei[i]==1))
{
xy<-as.vector(coords[i,])
xy<-xy[xy!=d]
Q0<-Q1[xy,xy]
if (length(xy)==2)
{
zaehler = diff(Q0)
zaehler = weights[i]*t(zaehler)%*%zaehler
qtilde0=Q0[1,1]+Q0[2,2]-2*Q0[1,2]
Q0=Q0+zaehler/(1-weights[i]*qtilde0)
qtilde=Q0[1,1]+Q0[2,2]-2*Q0[1,2]
}
else
{
zaehler = weights[i]*t(Q0)%*%Q0
qtilde0=Q0
qtilde=Q0+zaehler/(1-weights[i]*Q0)
}
b.temp <- (kappa*(gamma[xy[1]]-gamma[xy[2]])^2/2 + nu.b)
a.temp <- 1.5
print(-1/qtilde)
weights.proposed <-rstgamma(n=1,shape=a.temp,rate=b.temp,shift=-1/qtilde,a=0,b=1)
#update Q0
qtemp=diff(Q1[xy,])
qtemp1 = (weights.proposed-weights[i])
qtemp = qtemp1*t(qtemp)%*%qtemp
qtemp2 = 1-qtemp1*qtilde0
Q1 <- Q1 + qtemp/qtemp2
weights[i]=weights.proposed
}
}#endfor
i
i
weights
nr.nei[39]
xy<-as.vector(coords[i,])
xy<-xy[xy!=d]
Q0<-Q1[xy,xy]
xy
Q0
zaehler = diff(Q0)
Q0
xy
Q0<-Q1[xy,xy]
zaehler = weights[i]*t(Q0)%*%Q0
qtilde0=Q0
qtilde=Q0+zaehler/(1-weights[i]*Q0)
b.temp <- (kappa*(gamma[xy[1]]-gamma[xy[2]])^2/2 + nu.b)
a.temp <- 1.5
print(-1/qtilde)
weights.proposed <-rstgamma(n=1,shape=a.temp,rate=b.temp,shift=-1/qtilde,a=0,b=1)
a.temp
b.temp
xy
if (nr.einer)# nr.nei=1 -> use simple Gibbs sampler
{
nee<-coords[nr.nei.eins,]
if(is.null(dim(nee)))
{
b.temp <- (kappa*(gamma[nee[1]]-gamma[nee[2]])^2/2)
}
else
{
b.temp <- (kappa*(gamma[nee[,1]]-gamma[nee[,2]])^2/2)
}
a.temp <- 1
weights[nr.nei.eins] <-rtrunc(length(nr.nei.eins),"gamma",shape=a.temp,rate=b.temp,a=0,b=1)
}
diags<-(weights%*%diagM)[1,]
Q <- sparseMatrix(i=c(1:d,coords[,1]),j=c(1:d,coords[,2]),x=c(diags,-weights),symmetric=TRUE)
Q1 <- solve(Q[-d,-d])
Q1 <- as.matrix(Q1)
i=
1
xy<-as.vector(coords[i,])
xy<-xy[xy!=d]
Q0<-Q1[xy,xy]
if (length(xy)==2)
{
zaehler = diff(Q0)
zaehler = weights[i]*t(zaehler)%*%zaehler
qtilde0=Q0[1,1]+Q0[2,2]-2*Q0[1,2]
Q0=Q0+zaehler/(1-weights[i]*qtilde0)
qtilde=Q0[1,1]+Q0[2,2]-2*Q0[1,2]
b.temp <- (kappa*(gamma[xy[1]]-gamma[xy[2]])^2/2)
qtemp=diff(Q1[xy,])
}
xy
a.temp <- 1.5
b.temp
weights.proposed <-rstgamma(n=1,shape=a.temp,rate=b.temp,shift=-1/qtilde,a=0,b=1)
qtemp1 = (weights.proposed-weights[i])
qtemp = qtemp1*t(qtemp)%*%qtemp
qtemp2 = 1-qtemp1*qtilde0
Q1 <- Q1 + qtemp/qtemp2
weights[i]=weights.proposed
system.time({
xy<-as.vector(coords[i,])
xy<-xy[xy!=d]
Q0<-Q1[xy,xy]
if (length(xy)==2)
{
zaehler = diff(Q0)
zaehler = weights[i]*t(zaehler)%*%zaehler
qtilde0=Q0[1,1]+Q0[2,2]-2*Q0[1,2]
Q0=Q0+zaehler/(1-weights[i]*qtilde0)
qtilde=Q0[1,1]+Q0[2,2]-2*Q0[1,2]
b.temp <- (kappa*(gamma[xy[1]]-gamma[xy[2]])^2/2)
qtemp=diff(Q1[xy,])
}
else
{
zaehler = weights[i]*t(Q0)%*%Q0
qtilde0=Q0
qtilde=Q0+zaehler/(1-weights[i]*Q0)
qtilde=qtilde[1,1]
b.temp <- (kappa*(gamma[xy]-gamma[d])^2/2)
qtemp=t(Q1[xy,])
}
a.temp <- 1.5
#print(c(b.temp,-1/qtilde,xy,gamma[xy]))
weights.proposed <-rstgamma(n=1,shape=a.temp,rate=b.temp,shift=-1/qtilde,a=0,b=1)
#update Q0
qtemp1 = (weights.proposed-weights[i])
qtemp = qtemp1*t(qtemp)%*%qtemp
qtemp2 = 1-qtemp1*qtilde0
Q1 <- Q1 + qtemp/qtemp2
weights[i]=weights.proposed
})
system.time({
for (i in 1:p)
{
if(!(nr.nei[i]))
{
xy<-as.vector(coords[i,])
xy<-xy[xy!=d]
Q0<-Q1[xy,xy]
if (length(xy)==2)
{
zaehler = diff(Q0)
zaehler = weights[i]*t(zaehler)%*%zaehler
qtilde0=Q0[1,1]+Q0[2,2]-2*Q0[1,2]
Q0=Q0+zaehler/(1-weights[i]*qtilde0)
qtilde=Q0[1,1]+Q0[2,2]-2*Q0[1,2]
b.temp <- (kappa*(gamma[xy[1]]-gamma[xy[2]])^2/2)
qtemp=diff(Q1[xy,])
}
else
{
zaehler = weights[i]*t(Q0)%*%Q0
qtilde0=Q0
qtilde=Q0+zaehler/(1-weights[i]*Q0)
qtilde=qtilde[1,1]
b.temp <- (kappa*(gamma[xy]-gamma[d])^2/2)
qtemp=t(Q1[xy,])
}
a.temp <- 1.5
#print(c(b.temp,-1/qtilde,xy,gamma[xy]))
weights.proposed <-rstgamma(n=1,shape=a.temp,rate=b.temp,shift=-1/qtilde,a=0,b=1)
#update Q0
qtemp1 = (weights.proposed-weights[i])
qtemp = qtemp1*t(qtemp)%*%qtemp
qtemp2 = 1-qtemp1*qtilde0
Q1 <- Q1 + qtemp/qtemp2
weights[i]=weights.proposed
}
}#endfor
})
diags<-(weights%*%diagM)[1,]
Q <- sparseMatrix(i=c(1:d,coords[,1]),j=c(1:d,coords[,2]),x=c(diags,-weights),symmetric=TRUE)
Q1
library(adm)
options(mc.cores=6)
scoti<-adm(scotland.data$Counts, scotland.data$E, scotland.coords, nr.it=1500, burnin=500, thin=1, nu=1, adaptive=FALSE, do.kappa=TRUE,  kappa=1, ab.kappa=c(1,.001), tau=1000, print.time=TRUE)
gammai<-apply(scoti$gamma,2,mean)
library(adm)
options(mc.cores=2)
system.time({scoti<-adm(scotland.data$Counts, scotland.data$E, scotland.coords, nr.it=150, burnin=50, thin=1, nu=1, adaptive=FALSE, do.kappa=TRUE,  kappa=1, ab.kappa=c(1,.001), tau=1000, print.time=FALSE)})
system.time({scot<-adm(scotland.data$Counts, scotland.data$E, scotland.coords, nr.it=150, burnin=50, thin=1, nu=1, adaptive=TRUE, method="gibbs2beta", do.kappa=TRUE,  kappa=1, ab.kappa=c(1,.001), tau=1000, print.time=FALSE)})
5.5/1.3
system.time({scoti<-adm(scotland.data$Counts, scotland.data$E, scotland.coords, nr.it=1500, burnin=500, thin=1, nu=1, adaptive=FALSE, do.kappa=TRUE,  kappa=1, ab.kappa=c(1,.001), tau=1000, print.time=FALSE)})
system.time({scot<-adm(scotland.data$Counts, scotland.data$E, scotland.coords, nr.it=1500, burnin=500, thin=1, nu=1, adaptive=TRUE, method="gibbs2beta", do.kappa=TRUE,  kappa=1, ab.kappa=c(1,.001), tau=1000, print.time=FALSE)})
gammai<-apply(scoti$gamma,2,mean)
gamma<-apply(scot$gamma,2,mean)
par(mfrow=c(1,3))
map(gammai,scotland.shape)
title(main="gmrf")
map(gamma,scotland.shape)
title(main="agmrf")
map(scotland.data$Counts/scotland.data$E,scotland.shape)
title(main="rates")
par(mfrow=c(1,1))
map(gamma-gammai,scotland.shape)
summary(gamma-gammai)
system.time({scot<-adm(scotland.data$Counts, scotland.data$E, scotland.coords, nr.it=1500, burnin=500, thin=1, nu=1, adaptive=TRUE, method="gibbs3beta", do.kappa=TRUE,  kappa=1, ab.kappa=c(1,.001), tau=1000, print.time=FALSE)})
source('~/Dropbox/projects/approxGibbs/adm/test/scotland_sim.R')
source('~/.active-rstudio-document')
source('~/Dropbox/projects/approxGibbs/adm/test/scotland_sim.R')
source('~/Dropbox/projects/approxGibbs/adm/test/scotland_sim.R')
source('~/Dropbox/projects/approxGibbs/adm/test/scotland_sim.R')
source('~/.active-rstudio-document')
library(adm)
data(scotland)
par(mfrow=c(1,3))
true<-rep(0,52)
true[18:40]<-1
true[23:25]<-true[29:32]<-true[35:37]<-2
#map(true,scotland.shape)
scotland.sim<-scotland.data[,-3]
scotland.sim$E<-rpois(52,scotland.data$E-1)+1
globalgamma<-sample(c(-1,0,1))
gamma.true<-rnorm(52,globalgamma[true+1],.3)
map(gamma.true,scotland.shape)
scotland.sim$Counts<-rpois(52,scotland.sim$E*exp(gamma.true))
map(scotland.sim$Counts,scotland.shape)
map(scotland.sim$Counts/scotland.sim$E,scotland.shape)
options(mc.cores=4)
scoti<-adm(scotland.sim$Counts, scotland.sim$E, scotland.coords, nr.it=101, burnin=40, thin=6, nu=c(1,1), adaptive=FALSE, method="", do.kappa=TRUE,  kappa=1, ab.kappa=c(1,.001), tau=1000, print.time=FALSE)
gammai<-apply(scoti$gamma[-1000,],2,mean)
cuts<-seq(-1.6,1.6,length=32)
map(gammai,scotland.shape,cutpoints=cuts)
cuts
?save
?letters
sample(c(LETTERS,letters,0:9),1)
sample(c(LETTERS,letters,0:9),2)
sample(c(LETTERS,letters,0:9),2,rep=TRUE)
paste0(sample(c(LETTERS,letters,0:9),2,rep=TRUE)
)
paste0(sample(c(LETTERS,letters,0:9),2,rep=TRUE))
paste0(as.vector(sample(c(LETTERS,letters,0:9),2,rep=TRUE))
)
sample(c(LETTERS,letters,0:9),2,rep=TRUE)
sample(c(LETTERS,letters,0:9),2,rep=TRUE)
sample(c(LETTERS,letters,0:9),2,rep=TRUE)->x
paste(x)
x
class(x)
is.vector(x)
?character
paste(x)
deparse(x)
print(x)
paste(x,collapse=TRUE)
paste(x,collapse)
args(paste0)
paste(x,collapse=1)
paste(x,collapse="")
paste0(x,collapse="")
code=paste0(sample(c(LETTERS,letters,0:9),6,rep=TRUE),collapse="")
code
getwd()
source('~/Dropbox/projects/approxGibbs/adm/test/scotland_sim.R')
source('~/Dropbox/projects/approxGibbs/adm/test/scotland_sim.R')
getwd()
list.files()
save.image(file=paste0("scot/",code,".Rdata"))
source('~/.active-rstudio-document')
?seed
??seed
